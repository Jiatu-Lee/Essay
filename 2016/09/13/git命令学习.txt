$ git status

#
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   newFile.txt

no changes added to commit (use "git add" and/or "git commit -a")
#
这条命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，newFile.txt被修改过了，但还没有准备提交的修改。

$ git diff newFile.txt

#
diff --git a/newFile.txt b/newFile.txt
index 4e497fc..b0af4b0 100644
--- a/newFile.txt
+++ b/newFile.txt
@@ -1 +1,2 @@
-小泥人
\ No newline at end of file
+小泥人
+百年修得徐凤年
\ No newline at end of file
#
git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式。


所以：
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

$ git log
git log命令显示从最近到最远的提交日志， 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数。

$ git reset --hard HEAD
$ git reset --hard 版本号[测试结果，最少七位时才能正确执行]

$ git reflog
用来记录你的每一次命令。

所以：
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

$ git diff HEAD -- fileName 命令可以查看工作区和版本库里面最新版本的区别。